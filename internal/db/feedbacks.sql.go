// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feedbacks.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createFeedback = `-- name: CreateFeedback :one
INSERT INTO feedback (
    user_id,
    content,
    rating
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, content, rating, created_at, updated_at
`

type CreateFeedbackParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Content string      `json:"content"`
	Rating  pgtype.Int4 `json:"rating"`
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRow(ctx, createFeedback, arg.UserID, arg.Content, arg.Rating)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeedback = `-- name: DeleteFeedback :exec
DELETE FROM feedback
WHERE id = $1
`

func (q *Queries) DeleteFeedback(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFeedback, id)
	return err
}

const getFeedback = `-- name: GetFeedback :one
SELECT id, user_id, content, rating, created_at, updated_at FROM feedback
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFeedback(ctx context.Context, id uuid.UUID) (Feedback, error) {
	row := q.db.QueryRow(ctx, getFeedback, id)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFeedbacks = `-- name: ListFeedbacks :many
SELECT id, user_id, content, rating, created_at, updated_at FROM feedback
ORDER BY created_at DESC
`

func (q *Queries) ListFeedbacks(ctx context.Context) ([]Feedback, error) {
	rows, err := q.db.Query(ctx, listFeedbacks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Feedback{}
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedback = `-- name: UpdateFeedback :one
UPDATE feedback
SET
    content = $2,
    rating = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, content, rating, created_at, updated_at
`

type UpdateFeedbackParams struct {
	ID      uuid.UUID   `json:"id"`
	Content string      `json:"content"`
	Rating  pgtype.Int4 `json:"rating"`
}

func (q *Queries) UpdateFeedback(ctx context.Context, arg UpdateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRow(ctx, updateFeedback, arg.ID, arg.Content, arg.Rating)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
