// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: materials.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMaterial = `-- name: CreateMaterial :one
INSERT INTO materials (
    user_id, title, url
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, title, url, created_at, updated_at
`

type CreateMaterialParams struct {
	UserID uuid.UUID   `json:"user_id"`
	Title  string      `json:"title"`
	Url    pgtype.Text `json:"url"`
}

func (q *Queries) CreateMaterial(ctx context.Context, arg CreateMaterialParams) (Material, error) {
	row := q.db.QueryRow(ctx, createMaterial, arg.UserID, arg.Title, arg.Url)
	var i Material
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMaterial = `-- name: DeleteMaterial :exec
DELETE FROM materials
WHERE id = $1
`

func (q *Queries) DeleteMaterial(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMaterial, id)
	return err
}

const getMaterialByID = `-- name: GetMaterialByID :one
SELECT id, user_id, title, url, created_at, updated_at FROM materials
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMaterialByID(ctx context.Context, id uuid.UUID) (Material, error) {
	row := q.db.QueryRow(ctx, getMaterialByID, id)
	var i Material
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMaterials = `-- name: ListMaterials :many
SELECT id, user_id, title, url, created_at, updated_at FROM materials
ORDER BY created_at DESC
`

func (q *Queries) ListMaterials(ctx context.Context) ([]Material, error) {
	rows, err := q.db.Query(ctx, listMaterials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Material{}
	for rows.Next() {
		var i Material
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMaterialsByUserID = `-- name: ListMaterialsByUserID :many
SELECT id, user_id, title, url, created_at, updated_at FROM materials
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListMaterialsByUserID(ctx context.Context, userID uuid.UUID) ([]Material, error) {
	rows, err := q.db.Query(ctx, listMaterialsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Material{}
	for rows.Next() {
		var i Material
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaterial = `-- name: UpdateMaterial :one
UPDATE materials
SET
    user_id = $2, -- Use with caution if changing ownership
    title = $3,
    url = $4
WHERE id = $1
RETURNING id, user_id, title, url, created_at, updated_at
`

type UpdateMaterialParams struct {
	ID     uuid.UUID   `json:"id"`
	UserID uuid.UUID   `json:"user_id"`
	Title  string      `json:"title"`
	Url    pgtype.Text `json:"url"`
}

func (q *Queries) UpdateMaterial(ctx context.Context, arg UpdateMaterialParams) (Material, error) {
	row := q.db.QueryRow(ctx, updateMaterial,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Url,
	)
	var i Material
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
