// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ActivityAction string

const (
	ActivityActionLogin              ActivityAction = "login"
	ActivityActionLogout             ActivityAction = "logout"
	ActivityActionQuizCreate         ActivityAction = "quiz_create"
	ActivityActionQuizUpdate         ActivityAction = "quiz_update"
	ActivityActionQuizDelete         ActivityAction = "quiz_delete"
	ActivityActionQuizAttemptStart   ActivityAction = "quiz_attempt_start"
	ActivityActionQuizAttemptFinish  ActivityAction = "quiz_attempt_finish"
	ActivityActionQuizShare          ActivityAction = "quiz_share"
	ActivityActionQuizComment        ActivityAction = "quiz_comment"
	ActivityActionQuizLike           ActivityAction = "quiz_like"
	ActivityActionQuizBookmark       ActivityAction = "quiz_bookmark"
	ActivityActionMaterialUpload     ActivityAction = "material_upload"
	ActivityActionTopicCreate        ActivityAction = "topic_create"
	ActivityActionTopicUpdate        ActivityAction = "topic_update"
	ActivityActionTopicDelete        ActivityAction = "topic_delete"
	ActivityActionTokenPurchase      ActivityAction = "token_purchase"
	ActivityActionSubscriptionUpdate ActivityAction = "subscription_update"
	ActivityActionError              ActivityAction = "error"
)

func (e *ActivityAction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ActivityAction(s)
	case string:
		*e = ActivityAction(s)
	default:
		return fmt.Errorf("unsupported scan type for ActivityAction: %T", src)
	}
	return nil
}

type NullActivityAction struct {
	ActivityAction ActivityAction `json:"activity_action"`
	Valid          bool           `json:"valid"` // Valid is true if ActivityAction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullActivityAction) Scan(value interface{}) error {
	if value == nil {
		ns.ActivityAction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ActivityAction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullActivityAction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ActivityAction), nil
}

type ActivityTargetType string

const (
	ActivityTargetTypeQuiz         ActivityTargetType = "quiz"
	ActivityTargetTypeQuestion     ActivityTargetType = "question"
	ActivityTargetTypeAnswer       ActivityTargetType = "answer"
	ActivityTargetTypeTopic        ActivityTargetType = "topic"
	ActivityTargetTypeMaterial     ActivityTargetType = "material"
	ActivityTargetTypeUser         ActivityTargetType = "user"
	ActivityTargetTypeQuizAttempt  ActivityTargetType = "quiz_attempt"
	ActivityTargetTypeSubscription ActivityTargetType = "subscription"
	ActivityTargetTypePurchase     ActivityTargetType = "purchase"
)

func (e *ActivityTargetType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ActivityTargetType(s)
	case string:
		*e = ActivityTargetType(s)
	default:
		return fmt.Errorf("unsupported scan type for ActivityTargetType: %T", src)
	}
	return nil
}

type NullActivityTargetType struct {
	ActivityTargetType ActivityTargetType `json:"activity_target_type"`
	Valid              bool               `json:"valid"` // Valid is true if ActivityTargetType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullActivityTargetType) Scan(value interface{}) error {
	if value == nil {
		ns.ActivityTargetType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ActivityTargetType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullActivityTargetType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ActivityTargetType), nil
}

type QuizVisibility string

const (
	QuizVisibilityPublic   QuizVisibility = "public"
	QuizVisibilityPrivate  QuizVisibility = "private"
	QuizVisibilityUnlisted QuizVisibility = "unlisted"
)

func (e *QuizVisibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuizVisibility(s)
	case string:
		*e = QuizVisibility(s)
	default:
		return fmt.Errorf("unsupported scan type for QuizVisibility: %T", src)
	}
	return nil
}

type NullQuizVisibility struct {
	QuizVisibility QuizVisibility `json:"quiz_visibility"`
	Valid          bool           `json:"valid"` // Valid is true if QuizVisibility is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuizVisibility) Scan(value interface{}) error {
	if value == nil {
		ns.QuizVisibility, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuizVisibility.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuizVisibility) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuizVisibility), nil
}

type TokenType string

const (
	TokenTypePurchase          TokenType = "purchase"
	TokenTypeGift              TokenType = "gift"
	TokenTypeUsage             TokenType = "usage"
	TokenTypeRefund            TokenType = "refund"
	TokenTypeBonus             TokenType = "bonus"
	TokenTypeSubscriptionGrant TokenType = "subscription_grant"
)

func (e *TokenType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TokenType(s)
	case string:
		*e = TokenType(s)
	default:
		return fmt.Errorf("unsupported scan type for TokenType: %T", src)
	}
	return nil
}

type NullTokenType struct {
	TokenType TokenType `json:"token_type"`
	Valid     bool      `json:"valid"` // Valid is true if TokenType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTokenType) Scan(value interface{}) error {
	if value == nil {
		ns.TokenType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TokenType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTokenType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TokenType), nil
}

type ActivityLog struct {
	ID         uuid.UUID              `json:"id"`
	UserID     pgtype.UUID            `json:"user_id"`
	Action     ActivityAction         `json:"action"`
	TargetType NullActivityTargetType `json:"target_type"`
	TargetID   pgtype.UUID            `json:"target_id"`
	Details    []byte                 `json:"details"`
	CreatedAt  time.Time              `json:"created_at"`
	UpdatedAt  time.Time              `json:"updated_at"`
}

type Answer struct {
	ID          uuid.UUID   `json:"id"`
	QuestionID  uuid.UUID   `json:"question_id"`
	Answer      string      `json:"answer"`
	IsCorrect   bool        `json:"is_correct"`
	Explanation pgtype.Text `json:"explanation"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

type AttemptAnswer struct {
	ID               uuid.UUID   `json:"id"`
	QuizAttemptID    uuid.UUID   `json:"quiz_attempt_id"`
	QuestionID       uuid.UUID   `json:"question_id"`
	SelectedAnswerID pgtype.UUID `json:"selected_answer_id"`
	IsCorrect        pgtype.Bool `json:"is_correct"`
	CreatedAt        time.Time   `json:"created_at"`
	UpdatedAt        time.Time   `json:"updated_at"`
}

type Material struct {
	ID        uuid.UUID   `json:"id"`
	UserID    uuid.UUID   `json:"user_id"`
	Title     string      `json:"title"`
	Url       pgtype.Text `json:"url"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

type Question struct {
	ID        uuid.UUID `json:"id"`
	QuizID    uuid.UUID `json:"quiz_id"`
	TopicID   uuid.UUID `json:"topic_id"`
	Question  string    `json:"question"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type QuizAttempt struct {
	ID        uuid.UUID          `json:"id"`
	QuizID    uuid.UUID          `json:"quiz_id"`
	UserID    uuid.UUID          `json:"user_id"`
	Score     pgtype.Int4        `json:"score"`
	StartTime time.Time          `json:"start_time"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt time.Time          `json:"updated_at"`
}

type QuizMaterial struct {
	ID         uuid.UUID `json:"id"`
	QuizID     uuid.UUID `json:"quiz_id"`
	MaterialID uuid.UUID `json:"material_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type QuizTopic struct {
	ID        uuid.UUID `json:"id"`
	QuizID    uuid.UUID `json:"quiz_id"`
	TopicID   uuid.UUID `json:"topic_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Quize struct {
	ID          uuid.UUID      `json:"id"`
	CreatorID   pgtype.UUID    `json:"creator_id"`
	Title       string         `json:"title"`
	Description pgtype.Text    `json:"description"`
	Visibility  QuizVisibility `json:"visibility"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type Session struct {
	Token  string    `json:"token"`
	Data   []byte    `json:"data"`
	Expiry time.Time `json:"expiry"`
}

type Token struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Amount    int32     `json:"amount"`
	Type      TokenType `json:"type"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Topic struct {
	ID          uuid.UUID   `json:"id"`
	CreatorID   pgtype.UUID `json:"creator_id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

type User struct {
	ID                  uuid.UUID   `json:"id"`
	GoogleID            pgtype.Text `json:"google_id"`
	Email               string      `json:"email"`
	Name                pgtype.Text `json:"name"`
	Picture             pgtype.Text `json:"picture"`
	InputTokensBalance  int32       `json:"input_tokens_balance"`
	OutputTokensBalance int32       `json:"output_tokens_balance"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
}
