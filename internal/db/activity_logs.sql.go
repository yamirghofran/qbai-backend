// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: activity_logs.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createActivityLog = `-- name: CreateActivityLog :one
INSERT INTO activity_logs (
    user_id, action, target_type, target_id, details
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, user_id, action, target_type, target_id, details, created_at, updated_at
`

type CreateActivityLogParams struct {
	UserID     pgtype.UUID            `json:"user_id"`
	Action     ActivityAction         `json:"action"`
	TargetType NullActivityTargetType `json:"target_type"`
	TargetID   pgtype.UUID            `json:"target_id"`
	Details    []byte                 `json:"details"`
}

func (q *Queries) CreateActivityLog(ctx context.Context, arg CreateActivityLogParams) (ActivityLog, error) {
	row := q.db.QueryRow(ctx, createActivityLog,
		arg.UserID,
		arg.Action,
		arg.TargetType,
		arg.TargetID,
		arg.Details,
	)
	var i ActivityLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.TargetType,
		&i.TargetID,
		&i.Details,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteActivityLog = `-- name: DeleteActivityLog :exec
DELETE FROM activity_logs
WHERE id = $1
`

// Use with caution, logs are often meant to be kept
func (q *Queries) DeleteActivityLog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteActivityLog, id)
	return err
}

const getActivityLogByID = `-- name: GetActivityLogByID :one
SELECT id, user_id, action, target_type, target_id, details, created_at, updated_at FROM activity_logs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetActivityLogByID(ctx context.Context, id uuid.UUID) (ActivityLog, error) {
	row := q.db.QueryRow(ctx, getActivityLogByID, id)
	var i ActivityLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.TargetType,
		&i.TargetID,
		&i.Details,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActivityLogs = `-- name: ListActivityLogs :many
SELECT id, user_id, action, target_type, target_id, details, created_at, updated_at FROM activity_logs
ORDER BY created_at DESC
`

func (q *Queries) ListActivityLogs(ctx context.Context) ([]ActivityLog, error) {
	rows, err := q.db.Query(ctx, listActivityLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetType,
			&i.TargetID,
			&i.Details,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivityLogsByAction = `-- name: ListActivityLogsByAction :many
SELECT id, user_id, action, target_type, target_id, details, created_at, updated_at FROM activity_logs
WHERE action = $1
ORDER BY created_at DESC
`

func (q *Queries) ListActivityLogsByAction(ctx context.Context, action ActivityAction) ([]ActivityLog, error) {
	rows, err := q.db.Query(ctx, listActivityLogsByAction, action)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetType,
			&i.TargetID,
			&i.Details,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivityLogsByTarget = `-- name: ListActivityLogsByTarget :many
SELECT id, user_id, action, target_type, target_id, details, created_at, updated_at FROM activity_logs
WHERE target_type = $1 AND target_id = $2
ORDER BY created_at DESC
`

type ListActivityLogsByTargetParams struct {
	TargetType NullActivityTargetType `json:"target_type"`
	TargetID   pgtype.UUID            `json:"target_id"`
}

func (q *Queries) ListActivityLogsByTarget(ctx context.Context, arg ListActivityLogsByTargetParams) ([]ActivityLog, error) {
	rows, err := q.db.Query(ctx, listActivityLogsByTarget, arg.TargetType, arg.TargetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetType,
			&i.TargetID,
			&i.Details,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivityLogsByUserID = `-- name: ListActivityLogsByUserID :many
SELECT id, user_id, action, target_type, target_id, details, created_at, updated_at FROM activity_logs
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListActivityLogsByUserID(ctx context.Context, userID pgtype.UUID) ([]ActivityLog, error) {
	rows, err := q.db.Query(ctx, listActivityLogsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetType,
			&i.TargetID,
			&i.Details,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
