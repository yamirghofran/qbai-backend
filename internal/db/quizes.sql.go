// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: quizes.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createQuiz = `-- name: CreateQuiz :one
INSERT INTO quizes (
    creator_id, title, description, visibility
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, creator_id, title, description, visibility, created_at, updated_at
`

type CreateQuizParams struct {
	CreatorID   pgtype.UUID    `json:"creator_id"`
	Title       string         `json:"title"`
	Description pgtype.Text    `json:"description"`
	Visibility  QuizVisibility `json:"visibility"`
}

func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) (Quize, error) {
	row := q.db.QueryRow(ctx, createQuiz,
		arg.CreatorID,
		arg.Title,
		arg.Description,
		arg.Visibility,
	)
	var i Quize
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteQuiz = `-- name: DeleteQuiz :exec
DELETE FROM quizes
WHERE id = $1
`

func (q *Queries) DeleteQuiz(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteQuiz, id)
	return err
}

const getQuizByID = `-- name: GetQuizByID :one
SELECT
    q.id,
    q.creator_id,
    q.title,
    q.description,
    q.visibility,
    q.created_at,
    q.updated_at,
    u.name AS creator_name,
    u.picture AS creator_picture
FROM
    quizes q
JOIN
    users u ON q.creator_id = u.id
WHERE
    q.id = $1
LIMIT 1
`

type GetQuizByIDRow struct {
	ID             uuid.UUID      `json:"id"`
	CreatorID      pgtype.UUID    `json:"creator_id"`
	Title          string         `json:"title"`
	Description    pgtype.Text    `json:"description"`
	Visibility     QuizVisibility `json:"visibility"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	CreatorName    pgtype.Text    `json:"creator_name"`
	CreatorPicture pgtype.Text    `json:"creator_picture"`
}

func (q *Queries) GetQuizByID(ctx context.Context, id uuid.UUID) (GetQuizByIDRow, error) {
	row := q.db.QueryRow(ctx, getQuizByID, id)
	var i GetQuizByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatorName,
		&i.CreatorPicture,
	)
	return i, err
}

const listPublicQuizes = `-- name: ListPublicQuizes :many
SELECT id, creator_id, title, description, visibility, created_at, updated_at FROM quizes
WHERE visibility = 'public'
ORDER BY created_at DESC
`

func (q *Queries) ListPublicQuizes(ctx context.Context) ([]Quize, error) {
	rows, err := q.db.Query(ctx, listPublicQuizes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quize{}
	for rows.Next() {
		var i Quize
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.Visibility,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuizes = `-- name: ListQuizes :many
SELECT id, creator_id, title, description, visibility, created_at, updated_at FROM quizes
ORDER BY created_at DESC
`

func (q *Queries) ListQuizes(ctx context.Context) ([]Quize, error) {
	rows, err := q.db.Query(ctx, listQuizes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quize{}
	for rows.Next() {
		var i Quize
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.Visibility,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuizesByCreatorID = `-- name: ListQuizesByCreatorID :many
SELECT id, creator_id, title, description, visibility, created_at, updated_at FROM quizes
WHERE creator_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListQuizesByCreatorID(ctx context.Context, creatorID pgtype.UUID) ([]Quize, error) {
	rows, err := q.db.Query(ctx, listQuizesByCreatorID, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quize{}
	for rows.Next() {
		var i Quize
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.Visibility,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuizesByVisibility = `-- name: ListQuizesByVisibility :many
SELECT id, creator_id, title, description, visibility, created_at, updated_at FROM quizes
WHERE visibility = $1
ORDER BY created_at DESC
`

func (q *Queries) ListQuizesByVisibility(ctx context.Context, visibility QuizVisibility) ([]Quize, error) {
	rows, err := q.db.Query(ctx, listQuizesByVisibility, visibility)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quize{}
	for rows.Next() {
		var i Quize
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.Visibility,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuizzesByCreator = `-- name: ListQuizzesByCreator :many
SELECT id, title, created_at, updated_at FROM quizes
WHERE creator_id = $1
ORDER BY created_at DESC
`

type ListQuizzesByCreatorRow struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ListQuizzesByCreator(ctx context.Context, creatorID pgtype.UUID) ([]ListQuizzesByCreatorRow, error) {
	rows, err := q.db.Query(ctx, listQuizzesByCreator, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListQuizzesByCreatorRow{}
	for rows.Next() {
		var i ListQuizzesByCreatorRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuiz = `-- name: UpdateQuiz :one
UPDATE quizes
SET
    creator_id = $2, -- Use with caution if changing ownership
    title = $3,
    description = $4,
    visibility = $5
WHERE id = $1
RETURNING id, creator_id, title, description, visibility, created_at, updated_at
`

type UpdateQuizParams struct {
	ID          uuid.UUID      `json:"id"`
	CreatorID   pgtype.UUID    `json:"creator_id"`
	Title       string         `json:"title"`
	Description pgtype.Text    `json:"description"`
	Visibility  QuizVisibility `json:"visibility"`
}

func (q *Queries) UpdateQuiz(ctx context.Context, arg UpdateQuizParams) (Quize, error) {
	row := q.db.QueryRow(ctx, updateQuiz,
		arg.ID,
		arg.CreatorID,
		arg.Title,
		arg.Description,
		arg.Visibility,
	)
	var i Quize
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
