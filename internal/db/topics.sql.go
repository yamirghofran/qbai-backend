// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: topics.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTopic = `-- name: CreateTopic :one
INSERT INTO topics (
    creator_id, title, description
) VALUES (
    $1, $2, $3
)
RETURNING id, creator_id, title, description, created_at, updated_at
`

type CreateTopicParams struct {
	CreatorID   pgtype.UUID `json:"creator_id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateTopic(ctx context.Context, arg CreateTopicParams) (Topic, error) {
	row := q.db.QueryRow(ctx, createTopic, arg.CreatorID, arg.Title, arg.Description)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTopic = `-- name: DeleteTopic :exec
DELETE FROM topics
WHERE id = $1
`

func (q *Queries) DeleteTopic(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTopic, id)
	return err
}

const getTopicByID = `-- name: GetTopicByID :one
SELECT id, creator_id, title, description, created_at, updated_at FROM topics
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTopicByID(ctx context.Context, id uuid.UUID) (Topic, error) {
	row := q.db.QueryRow(ctx, getTopicByID, id)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTopicByTitleAndUser = `-- name: GetTopicByTitleAndUser :one
SELECT id, creator_id, title, description, created_at, updated_at
FROM topics
WHERE title = $1 AND creator_id = $2
`

type GetTopicByTitleAndUserParams struct {
	Title     string      `json:"title"`
	CreatorID pgtype.UUID `json:"creator_id"`
}

func (q *Queries) GetTopicByTitleAndUser(ctx context.Context, arg GetTopicByTitleAndUserParams) (Topic, error) {
	row := q.db.QueryRow(ctx, getTopicByTitleAndUser, arg.Title, arg.CreatorID)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTopics = `-- name: ListTopics :many
SELECT id, creator_id, title, description, created_at, updated_at FROM topics
ORDER BY created_at DESC
`

func (q *Queries) ListTopics(ctx context.Context) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsByCreatorID = `-- name: ListTopicsByCreatorID :many
SELECT id, creator_id, title, description, created_at, updated_at FROM topics
WHERE creator_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTopicsByCreatorID(ctx context.Context, creatorID pgtype.UUID) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsByCreatorID, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTopic = `-- name: UpdateTopic :one
UPDATE topics
SET
    creator_id = $2, -- Use with caution if changing ownership
    title = $3,
    description = $4
WHERE id = $1
RETURNING id, creator_id, title, description, created_at, updated_at
`

type UpdateTopicParams struct {
	ID          uuid.UUID   `json:"id"`
	CreatorID   pgtype.UUID `json:"creator_id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateTopic(ctx context.Context, arg UpdateTopicParams) (Topic, error) {
	row := q.db.QueryRow(ctx, updateTopic,
		arg.ID,
		arg.CreatorID,
		arg.Title,
		arg.Description,
	)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
