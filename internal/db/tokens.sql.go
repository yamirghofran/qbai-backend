// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tokens.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
    user_id, amount, type
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, amount, type, created_at, updated_at
`

type CreateTokenParams struct {
	UserID uuid.UUID `json:"user_id"`
	Amount int32     `json:"amount"`
	Type   TokenType `json:"type"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken, arg.UserID, arg.Amount, arg.Type)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, id)
	return err
}

const getTokenByID = `-- name: GetTokenByID :one
SELECT id, user_id, amount, type, created_at, updated_at FROM tokens
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTokenByID(ctx context.Context, id uuid.UUID) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByID, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTokens = `-- name: ListTokens :many
SELECT id, user_id, amount, type, created_at, updated_at FROM tokens
ORDER BY created_at DESC
`

func (q *Queries) ListTokens(ctx context.Context) ([]Token, error) {
	rows, err := q.db.Query(ctx, listTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Token{}
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTokensByUserID = `-- name: ListTokensByUserID :many
SELECT id, user_id, amount, type, created_at, updated_at FROM tokens
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTokensByUserID(ctx context.Context, userID uuid.UUID) ([]Token, error) {
	rows, err := q.db.Query(ctx, listTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Token{}
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateToken = `-- name: UpdateToken :one
UPDATE tokens
SET
    user_id = $2, -- You might not want to update user_id often
    amount = $3,
    type = $4
WHERE id = $1
RETURNING id, user_id, amount, type, created_at, updated_at
`

type UpdateTokenParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
	Amount int32     `json:"amount"`
	Type   TokenType `json:"type"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, updateToken,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Type,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
