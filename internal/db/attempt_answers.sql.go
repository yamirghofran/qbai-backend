// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attempt_answers.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const calculateQuizAttemptScore = `-- name: CalculateQuizAttemptScore :one

SELECT COUNT(*)
FROM attempt_answers
WHERE quiz_attempt_id = $1 AND is_correct = TRUE
`

// Or order by question order if needed, requires joining questions
func (q *Queries) CalculateQuizAttemptScore(ctx context.Context, quizAttemptID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, calculateQuizAttemptScore, quizAttemptID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAttemptAnswer = `-- name: GetAttemptAnswer :one
SELECT id, quiz_attempt_id, question_id, selected_answer_id, is_correct, created_at, updated_at
FROM attempt_answers
WHERE quiz_attempt_id = $1 AND question_id = $2
`

type GetAttemptAnswerParams struct {
	QuizAttemptID uuid.UUID `json:"quiz_attempt_id"`
	QuestionID    uuid.UUID `json:"question_id"`
}

func (q *Queries) GetAttemptAnswer(ctx context.Context, arg GetAttemptAnswerParams) (AttemptAnswer, error) {
	row := q.db.QueryRow(ctx, getAttemptAnswer, arg.QuizAttemptID, arg.QuestionID)
	var i AttemptAnswer
	err := row.Scan(
		&i.ID,
		&i.QuizAttemptID,
		&i.QuestionID,
		&i.SelectedAnswerID,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAttemptAnswersByAttempt = `-- name: ListAttemptAnswersByAttempt :many
SELECT id, quiz_attempt_id, question_id, selected_answer_id, is_correct, created_at, updated_at
FROM attempt_answers
WHERE quiz_attempt_id = $1
ORDER BY created_at
`

func (q *Queries) ListAttemptAnswersByAttempt(ctx context.Context, quizAttemptID uuid.UUID) ([]AttemptAnswer, error) {
	rows, err := q.db.Query(ctx, listAttemptAnswersByAttempt, quizAttemptID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AttemptAnswer{}
	for rows.Next() {
		var i AttemptAnswer
		if err := rows.Scan(
			&i.ID,
			&i.QuizAttemptID,
			&i.QuestionID,
			&i.SelectedAnswerID,
			&i.IsCorrect,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAttemptAnswer = `-- name: UpsertAttemptAnswer :one
INSERT INTO attempt_answers (quiz_attempt_id, question_id, selected_answer_id, is_correct)
VALUES ($1, $2, $3, $4)
ON CONFLICT (quiz_attempt_id, question_id)
DO UPDATE SET
    selected_answer_id = EXCLUDED.selected_answer_id,
    is_correct = EXCLUDED.is_correct,
    updated_at = NOW()
RETURNING id, quiz_attempt_id, question_id, selected_answer_id, is_correct, created_at, updated_at
`

type UpsertAttemptAnswerParams struct {
	QuizAttemptID    uuid.UUID   `json:"quiz_attempt_id"`
	QuestionID       uuid.UUID   `json:"question_id"`
	SelectedAnswerID pgtype.UUID `json:"selected_answer_id"`
	IsCorrect        pgtype.Bool `json:"is_correct"`
}

func (q *Queries) UpsertAttemptAnswer(ctx context.Context, arg UpsertAttemptAnswerParams) (AttemptAnswer, error) {
	row := q.db.QueryRow(ctx, upsertAttemptAnswer,
		arg.QuizAttemptID,
		arg.QuestionID,
		arg.SelectedAnswerID,
		arg.IsCorrect,
	)
	var i AttemptAnswer
	err := row.Scan(
		&i.ID,
		&i.QuizAttemptID,
		&i.QuestionID,
		&i.SelectedAnswerID,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
