// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    google_id, email, name, picture -- Added picture
) VALUES (
    $1, $2, $3, $4 -- Added $4 for picture
)
RETURNING id, google_id, email, name, picture, input_tokens_balance, output_tokens_balance, created_at, updated_at
`

type CreateUserParams struct {
	GoogleID pgtype.Text `json:"google_id"`
	Email    string      `json:"email"`
	Name     pgtype.Text `json:"name"`
	Picture  pgtype.Text `json:"picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.GoogleID,
		arg.Email,
		arg.Name,
		arg.Picture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.InputTokensBalance,
		&i.OutputTokensBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, google_id, email, name, picture, input_tokens_balance, output_tokens_balance, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.InputTokensBalance,
		&i.OutputTokensBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, google_id, email, name, picture, input_tokens_balance, output_tokens_balance, created_at, updated_at FROM users
WHERE google_id = $1 LIMIT 1
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.InputTokensBalance,
		&i.OutputTokensBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, google_id, email, name, picture, input_tokens_balance, output_tokens_balance, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.InputTokensBalance,
		&i.OutputTokensBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, google_id, email, name, picture, input_tokens_balance, output_tokens_balance, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.GoogleID,
			&i.Email,
			&i.Name,
			&i.Picture,
			&i.InputTokensBalance,
			&i.OutputTokensBalance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one

UPDATE users
SET
    google_id = $2,
    email = $3,
    name = $4
WHERE id = $1
RETURNING id, google_id, email, name, picture, input_tokens_balance, output_tokens_balance, created_at, updated_at
`

type UpdateUserParams struct {
	ID       uuid.UUID   `json:"id"`
	GoogleID pgtype.Text `json:"google_id"`
	Email    string      `json:"email"`
	Name     pgtype.Text `json:"name"`
}

// Or any other order
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.GoogleID,
		arg.Email,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.InputTokensBalance,
		&i.OutputTokensBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserTokenBalance = `-- name: UpdateUserTokenBalance :one
UPDATE users
SET
    input_tokens_balance = input_tokens_balance - $2,
    output_tokens_balance = output_tokens_balance - $3
WHERE id = $1
RETURNING id, google_id, email, name, picture, input_tokens_balance, output_tokens_balance, created_at, updated_at
`

type UpdateUserTokenBalanceParams struct {
	ID                  uuid.UUID `json:"id"`
	InputTokensBalance  int32     `json:"input_tokens_balance"`
	OutputTokensBalance int32     `json:"output_tokens_balance"`
}

func (q *Queries) UpdateUserTokenBalance(ctx context.Context, arg UpdateUserTokenBalanceParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserTokenBalance, arg.ID, arg.InputTokensBalance, arg.OutputTokensBalance)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.InputTokensBalance,
		&i.OutputTokensBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
