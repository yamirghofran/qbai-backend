// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: questions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (
    quiz_id, topic_id, question
) VALUES (
    $1, $2, $3
)
RETURNING id, quiz_id, topic_id, question, created_at, updated_at
`

type CreateQuestionParams struct {
	QuizID   uuid.UUID `json:"quiz_id"`
	TopicID  uuid.UUID `json:"topic_id"`
	Question string    `json:"question"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion, arg.QuizID, arg.TopicID, arg.Question)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.TopicID,
		&i.Question,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions
WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteQuestion, id)
	return err
}

const getQuestionByID = `-- name: GetQuestionByID :one
SELECT id, quiz_id, topic_id, question, created_at, updated_at FROM questions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuestionByID(ctx context.Context, id uuid.UUID) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestionByID, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.TopicID,
		&i.Question,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, quiz_id, topic_id, question, created_at, updated_at FROM questions
ORDER BY created_at ASC
`

func (q *Queries) ListQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.TopicID,
			&i.Question,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByQuizAndTopicID = `-- name: ListQuestionsByQuizAndTopicID :many
SELECT id, quiz_id, topic_id, question, created_at, updated_at FROM questions
WHERE quiz_id = $1 AND topic_id = $2
ORDER BY created_at ASC
`

type ListQuestionsByQuizAndTopicIDParams struct {
	QuizID  uuid.UUID `json:"quiz_id"`
	TopicID uuid.UUID `json:"topic_id"`
}

func (q *Queries) ListQuestionsByQuizAndTopicID(ctx context.Context, arg ListQuestionsByQuizAndTopicIDParams) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestionsByQuizAndTopicID, arg.QuizID, arg.TopicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.TopicID,
			&i.Question,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByQuizID = `-- name: ListQuestionsByQuizID :many

SELECT
    q.id, q.quiz_id, q.topic_id, q.question, q.created_at, q.updated_at,
    t.title AS topic_title
FROM
    questions q
LEFT JOIN
    topics t ON q.topic_id = t.id
WHERE
    q.quiz_id = $1
ORDER BY
    q.created_at ASC
`

type ListQuestionsByQuizIDRow struct {
	ID         uuid.UUID   `json:"id"`
	QuizID     uuid.UUID   `json:"quiz_id"`
	TopicID    uuid.UUID   `json:"topic_id"`
	Question   string      `json:"question"`
	CreatedAt  time.Time   `json:"created_at"`
	UpdatedAt  time.Time   `json:"updated_at"`
	TopicTitle pgtype.Text `json:"topic_title"`
}

// Or by position/order if added
func (q *Queries) ListQuestionsByQuizID(ctx context.Context, quizID uuid.UUID) ([]ListQuestionsByQuizIDRow, error) {
	rows, err := q.db.Query(ctx, listQuestionsByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListQuestionsByQuizIDRow{}
	for rows.Next() {
		var i ListQuestionsByQuizIDRow
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.TopicID,
			&i.Question,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TopicTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByTopicID = `-- name: ListQuestionsByTopicID :many
SELECT id, quiz_id, topic_id, question, created_at, updated_at FROM questions
WHERE topic_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListQuestionsByTopicID(ctx context.Context, topicID uuid.UUID) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestionsByTopicID, topicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.TopicID,
			&i.Question,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET
    quiz_id = $2,
    topic_id = $3,
    question = $4
WHERE id = $1
RETURNING id, quiz_id, topic_id, question, created_at, updated_at
`

type UpdateQuestionParams struct {
	ID       uuid.UUID `json:"id"`
	QuizID   uuid.UUID `json:"quiz_id"`
	TopicID  uuid.UUID `json:"topic_id"`
	Question string    `json:"question"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, updateQuestion,
		arg.ID,
		arg.QuizID,
		arg.TopicID,
		arg.Question,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.TopicID,
		&i.Question,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
