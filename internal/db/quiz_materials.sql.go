// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: quiz_materials.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getQuizMaterialByID = `-- name: GetQuizMaterialByID :one
SELECT id, quiz_id, material_id, created_at, updated_at FROM quiz_materials
WHERE id = $1 LIMIT 1
`

// Less common to fetch by its own ID, but included for completeness
func (q *Queries) GetQuizMaterialByID(ctx context.Context, id uuid.UUID) (QuizMaterial, error) {
	row := q.db.QueryRow(ctx, getQuizMaterialByID, id)
	var i QuizMaterial
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.MaterialID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuizMaterialByQuizAndMaterialID = `-- name: GetQuizMaterialByQuizAndMaterialID :one
SELECT id, quiz_id, material_id, created_at, updated_at FROM quiz_materials
WHERE quiz_id = $1 AND material_id = $2 LIMIT 1
`

type GetQuizMaterialByQuizAndMaterialIDParams struct {
	QuizID     uuid.UUID `json:"quiz_id"`
	MaterialID uuid.UUID `json:"material_id"`
}

func (q *Queries) GetQuizMaterialByQuizAndMaterialID(ctx context.Context, arg GetQuizMaterialByQuizAndMaterialIDParams) (QuizMaterial, error) {
	row := q.db.QueryRow(ctx, getQuizMaterialByQuizAndMaterialID, arg.QuizID, arg.MaterialID)
	var i QuizMaterial
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.MaterialID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const linkQuizMaterial = `-- name: LinkQuizMaterial :one
INSERT INTO quiz_materials (
    quiz_id, material_id
) VALUES (
    $1, $2
)
RETURNING id, quiz_id, material_id, created_at, updated_at
`

type LinkQuizMaterialParams struct {
	QuizID     uuid.UUID `json:"quiz_id"`
	MaterialID uuid.UUID `json:"material_id"`
}

func (q *Queries) LinkQuizMaterial(ctx context.Context, arg LinkQuizMaterialParams) (QuizMaterial, error) {
	row := q.db.QueryRow(ctx, linkQuizMaterial, arg.QuizID, arg.MaterialID)
	var i QuizMaterial
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.MaterialID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMaterialIDsByQuizID = `-- name: ListMaterialIDsByQuizID :many
SELECT material_id FROM quiz_materials
WHERE quiz_id = $1
`

func (q *Queries) ListMaterialIDsByQuizID(ctx context.Context, quizID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listMaterialIDsByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var material_id uuid.UUID
		if err := rows.Scan(&material_id); err != nil {
			return nil, err
		}
		items = append(items, material_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuizIDsByMaterialID = `-- name: ListQuizIDsByMaterialID :many
SELECT quiz_id FROM quiz_materials
WHERE material_id = $1
`

func (q *Queries) ListQuizIDsByMaterialID(ctx context.Context, materialID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listQuizIDsByMaterialID, materialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var quiz_id uuid.UUID
		if err := rows.Scan(&quiz_id); err != nil {
			return nil, err
		}
		items = append(items, quiz_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuizMaterialsByQuizID = `-- name: ListQuizMaterialsByQuizID :many
SELECT id, quiz_id, material_id, created_at, updated_at FROM quiz_materials
WHERE quiz_id = $1
`

func (q *Queries) ListQuizMaterialsByQuizID(ctx context.Context, quizID uuid.UUID) ([]QuizMaterial, error) {
	rows, err := q.db.Query(ctx, listQuizMaterialsByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuizMaterial{}
	for rows.Next() {
		var i QuizMaterial
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.MaterialID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unlinkAllMaterialsFromQuiz = `-- name: UnlinkAllMaterialsFromQuiz :exec
DELETE FROM quiz_materials
WHERE quiz_id = $1
`

func (q *Queries) UnlinkAllMaterialsFromQuiz(ctx context.Context, quizID uuid.UUID) error {
	_, err := q.db.Exec(ctx, unlinkAllMaterialsFromQuiz, quizID)
	return err
}

const unlinkMaterialFromAllQuizes = `-- name: UnlinkMaterialFromAllQuizes :exec
DELETE FROM quiz_materials
WHERE material_id = $1
`

func (q *Queries) UnlinkMaterialFromAllQuizes(ctx context.Context, materialID uuid.UUID) error {
	_, err := q.db.Exec(ctx, unlinkMaterialFromAllQuizes, materialID)
	return err
}

const unlinkQuizMaterial = `-- name: UnlinkQuizMaterial :exec
DELETE FROM quiz_materials
WHERE quiz_id = $1 AND material_id = $2
`

type UnlinkQuizMaterialParams struct {
	QuizID     uuid.UUID `json:"quiz_id"`
	MaterialID uuid.UUID `json:"material_id"`
}

func (q *Queries) UnlinkQuizMaterial(ctx context.Context, arg UnlinkQuizMaterialParams) error {
	_, err := q.db.Exec(ctx, unlinkQuizMaterial, arg.QuizID, arg.MaterialID)
	return err
}
