// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: quiz_topics.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getQuizTopicByID = `-- name: GetQuizTopicByID :one
SELECT id, quiz_id, topic_id, created_at, updated_at FROM quiz_topics
WHERE id = $1 LIMIT 1
`

// Less common to fetch by its own ID, but included for completeness
func (q *Queries) GetQuizTopicByID(ctx context.Context, id uuid.UUID) (QuizTopic, error) {
	row := q.db.QueryRow(ctx, getQuizTopicByID, id)
	var i QuizTopic
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.TopicID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuizTopicByQuizAndTopicID = `-- name: GetQuizTopicByQuizAndTopicID :one
SELECT id, quiz_id, topic_id, created_at, updated_at FROM quiz_topics
WHERE quiz_id = $1 AND topic_id = $2 LIMIT 1
`

type GetQuizTopicByQuizAndTopicIDParams struct {
	QuizID  uuid.UUID `json:"quiz_id"`
	TopicID uuid.UUID `json:"topic_id"`
}

func (q *Queries) GetQuizTopicByQuizAndTopicID(ctx context.Context, arg GetQuizTopicByQuizAndTopicIDParams) (QuizTopic, error) {
	row := q.db.QueryRow(ctx, getQuizTopicByQuizAndTopicID, arg.QuizID, arg.TopicID)
	var i QuizTopic
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.TopicID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const linkQuizTopic = `-- name: LinkQuizTopic :one
INSERT INTO quiz_topics (
    quiz_id, topic_id
) VALUES (
    $1, $2
)
RETURNING id, quiz_id, topic_id, created_at, updated_at
`

type LinkQuizTopicParams struct {
	QuizID  uuid.UUID `json:"quiz_id"`
	TopicID uuid.UUID `json:"topic_id"`
}

func (q *Queries) LinkQuizTopic(ctx context.Context, arg LinkQuizTopicParams) (QuizTopic, error) {
	row := q.db.QueryRow(ctx, linkQuizTopic, arg.QuizID, arg.TopicID)
	var i QuizTopic
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.TopicID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listQuizIDsByTopicID = `-- name: ListQuizIDsByTopicID :many
SELECT quiz_id FROM quiz_topics
WHERE topic_id = $1
`

func (q *Queries) ListQuizIDsByTopicID(ctx context.Context, topicID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listQuizIDsByTopicID, topicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var quiz_id uuid.UUID
		if err := rows.Scan(&quiz_id); err != nil {
			return nil, err
		}
		items = append(items, quiz_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuizTopicsByQuizID = `-- name: ListQuizTopicsByQuizID :many
SELECT id, quiz_id, topic_id, created_at, updated_at FROM quiz_topics
WHERE quiz_id = $1
`

func (q *Queries) ListQuizTopicsByQuizID(ctx context.Context, quizID uuid.UUID) ([]QuizTopic, error) {
	rows, err := q.db.Query(ctx, listQuizTopicsByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuizTopic{}
	for rows.Next() {
		var i QuizTopic
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.TopicID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicIDsByQuizID = `-- name: ListTopicIDsByQuizID :many
SELECT topic_id FROM quiz_topics
WHERE quiz_id = $1
`

func (q *Queries) ListTopicIDsByQuizID(ctx context.Context, quizID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listTopicIDsByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var topic_id uuid.UUID
		if err := rows.Scan(&topic_id); err != nil {
			return nil, err
		}
		items = append(items, topic_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unlinkAllTopicsFromQuiz = `-- name: UnlinkAllTopicsFromQuiz :exec
DELETE FROM quiz_topics
WHERE quiz_id = $1
`

func (q *Queries) UnlinkAllTopicsFromQuiz(ctx context.Context, quizID uuid.UUID) error {
	_, err := q.db.Exec(ctx, unlinkAllTopicsFromQuiz, quizID)
	return err
}

const unlinkQuizTopic = `-- name: UnlinkQuizTopic :exec
DELETE FROM quiz_topics
WHERE quiz_id = $1 AND topic_id = $2
`

type UnlinkQuizTopicParams struct {
	QuizID  uuid.UUID `json:"quiz_id"`
	TopicID uuid.UUID `json:"topic_id"`
}

func (q *Queries) UnlinkQuizTopic(ctx context.Context, arg UnlinkQuizTopicParams) error {
	_, err := q.db.Exec(ctx, unlinkQuizTopic, arg.QuizID, arg.TopicID)
	return err
}

const unlinkTopicFromAllQuizes = `-- name: UnlinkTopicFromAllQuizes :exec
DELETE FROM quiz_topics
WHERE topic_id = $1
`

func (q *Queries) UnlinkTopicFromAllQuizes(ctx context.Context, topicID uuid.UUID) error {
	_, err := q.db.Exec(ctx, unlinkTopicFromAllQuizes, topicID)
	return err
}
